<!-- /templates/collection.liquid -->
<style>
  div#shopify-section-footer {
    z-index: 1;
    position: relative;
  }
</style>
{%- if section.settings.show_collection_image and collection.image -%}
<div class="collection-hero">
  <noscript>
    <div class="collection-hero__image-no-js" style="background-image:url({{ collection.image | img_url: '2048x2048' }});"></div>
  </noscript>
  {%- assign img_url = collection.image | img_url: '1x1' | replace: '_1x1.', '_{width}x.' -%}
  {%- comment -%}
  If the collection.image height is < 70% of its width on mobile or < 45% on desktop, we crop the container to make sure it's the same height as the image. {%- endcomment -%} {%- assign height_width_ratio = 100 | divided_by: collection.image.aspect_ratio | floor -%} {%- if height_width_ratio < 70 -%} <style>
    {%- if height_width_ratio < 45 -%}
    .collection-hero__image-wrapper::after {
    padding-bottom: {{ height_width_ratio }}%;
    }
    {%- else -%}
    @media screen and (max-width: 768px) {
    .collection-hero__image-wrapper::after {
    padding-bottom: {{ height_width_ratio }}%;
    }
    }
    {%- endif -%}
    </style>
    {%- endif -%}
    <div class="collection-hero__image-wrapper">
      <img class="collection-hero__image lazyload" src="{{ collection.image | img_url: '300x' }}" data-src="{{ img_url }}" data-widths="[540, 720, 900, 1080, 1296, 1512, 1728, 1944, 2048, 4472]" data-aspectratio="{{ collection.image.aspect_ratio }}" data-sizes="auto" data-parent-fit="cover" alt="{{ collection.image.alt | escape }}">
    </div>
</div>
{%- endif -%}

<div class="collection_main_outer" id="CollectionSection" data-section-id="{{ section.id }}" data-section-type="collection-template" data-grid-type="{{ section.settings.collection_products_grid }}">
  <div class="all-products-hero" style="background-image: url('{{ 'travel-bg.webp' | asset_url }}');">
    <div class="all-products-hero-container">
      <div class="all-products-hero-inner">
        <span>ALL PRODUCTS</span>
        <div class="all-products-inner">
          <h1>Shop Our Range of SIM Cards for Seamless Connectivity</h1>
          <p>Explore a world of connectivity options with our range of SIM cards, ensuring you stay connected wherever you go.</p>
        </div>
      </div>
    </div>
  </div>
  <div class="grid-uniform continent_sim_cards collection_all all-products">
    
    <!-- Start of All Products Collection -->
    <div class="product-filter-section">
      <div class="product-filter-container">
        <div class="filter-header-mobile">
            <h2>Filters</h2>
            <div id="filter-toggle">
              <span class="filter-close-icon">&#x2715;</span>
              <span class="filter-open-icon"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48" id="filter"><path d="M4 10h7.09a6 6 0 0 0 11.82 0H44a1 1 0 0 0 0-2H22.91A6 6 0 0 0 11.09 8H4a1 1 0 0 0 0 2zM17 5a4 4 0 1 1-4 4A4 4 0 0 1 17 5zM44 23H36.91a6 6 0 0 0-11.82 0H4a1 1 0 0 0 0 2H25.09a6 6 0 0 0 11.82 0H44a1 1 0 0 0 0-2zM31 28a4 4 0 1 1 4-4A4 4 0 0 1 31 28zM44 38H22.91a6 6 0 0 0-11.82 0H4a1 1 0 0 0 0 2h7.09a6 6 0 0 0 11.82 0H44a1 1 0 0 0 0-2zM17 43a4 4 0 1 1 4-4A4 4 0 0 1 17 43z" data-name="Layer 15"></path></svg></span>
            </div>
          </div>
        <div class="product-filter-inner">
        <!-- Search Section -->
        <div class="filter-option filter-search">
          <input type="text" id="search-input" placeholder="Search for Country, City, SIM, eSIM, etc." oninput="filterBySearch()">
        </div>
        <!-- End Search Section -->

        <!-- Type Filter Section -->
        <div class="filter-option filter-type">
          <label for="tag-filter">Product Type</label>
          <button data-type="all" onclick="filterByTitle('all', this); resetDisable();">All</button>
          <button data-type="eSIM" onclick="filterByTitle('eSIM', this); resetDisable();">eSIM</button>
          <button data-type="no_eSIM" onclick="filterByTitle('no_eSIM', this); resetDisable();">Physical SIM</button>
          <button onclick="filterByTag('accessories'); disableSelect()" id="accessories-filter">Accessories</button>
        </div>
        <!-- End Type Filter Section -->

        <!-- Collection Filter Section -->
        <div class="filter-option filter-collection">
          <label for="collection-filter">Product Collection</label>
          <select id="collection-filter" onchange="filterByCollection(this.value); disableAccessories()">
            <option value="all">All</option>
            {%- for collection in collections -%}
            <option value="{{ collection.handle }}">{{ collection.title }}</option>
            {%- endfor -%}
          </select>
        </div>
        <!-- End Collection Filter Section -->

        <!-- Tag Filter Section -->
        <div class="filter-option filter-tag">
          <label for="tag-filter">Product Tag</label>
          <select id="tag-filter" onchange="filterByTag(this.value); disableAccessories()">
            <option value="all">All</option>
            {%- assign all_tags = collection.all_tags | sort -%}
            {%- for tag in all_tags -%}
            <option value="{{ tag }}">{{ tag }}</option>
            {%- endfor -%}
          </select>
        </div>
        <!-- End Tag Filter Section -->


        <!-- Sort By Section -->
        <div class="filter-option filter-sort">
          <label>Sort By</label>
          <div class="radio-sort">
            <input type="radio" name="sort-radio" value="default" onclick="sortProducts(this.value)" checked>
            <span>default</span>
          </div>
          <div class="radio-sort">
            <input type="radio" name="sort-radio" value="price-low-to-high" onclick="sortProducts(this.value)">
            <span>Lowest Price</span>
          </div>
          <div class="radio-sort">
            <input type="radio" name="sort-radio" value="price-high-to-low" onclick="sortProducts(this.value)">
            <span>Highest Price</span>
          </div>
          <div class="radio-sort">
            <input type="radio" name="sort-radio" value="title-a-z" onclick="sortProducts(this.value)">
            <span>Product title, A-Z</span>
          </div>
          <div class="radio-sort">
            <input type="radio" name="sort-radio" value="title-z-a" onclick="sortProducts(this.value)">
            <span>Product title, Z-A</span>
          </div>
          <div class="radio-sort">
            <input type="radio" name="sort-radio" value="date-new-to-old" onclick="sortProducts(this.value)">
            <span>Newest</span>
          </div>
          <div class="radio-sort">
            <input type="radio" name="sort-radio" value="date-old-to-new" onclick="sortProducts(this.value)">
            <span>Oldest</span>
          </div>
        </div>
      </div>
    </div>
    </div>
    <!-- End Sort By Section -->


    <div class="all-product-section">
      <div class="all-filter-container">
        <div id="tag-filter-selection">
          <span id="selected-type" class="selected-filter">
            <div>All</div>
          </span>
          <span id="selected-collection" class="selected-filter"></span>
          <span id="selected-tag" class="selected-filter"></span>
          <span id="selected-sort" class="selected-filter"></span>
          <button id="resetButton" onclick="resetFilters(); resetDisable(); resetSearch()" style="display: none;">Clear</button>
        </div>  

        <span id="product-count">{{ collection.all_products_count }}</span>
      </div>
      <div class="carousel_main">
        <div class="carousel" id="carousel_one">
          {%- paginate collection.products by 99999 -%}
          {%- for product in collection.products -%}
          {%- assign loopindex = forloop.index | modulo: 3 -%}
          {%- assign product_tags = product.tags | join: ',' -%}
          {%- assign product_collections = product.collections | map: 'handle' | join: ',' -%}
          <div class="product-item" data-tags="{{ product_tags }}" data-collections="{{ product_collections }}" data-date="{{ product.created_at | date: "%Y-%m-%dT%H:%M:%SZ" }}">
            {%- include 'product-grid-item' -%}
          </div>
          {% if loopindex == 0 %}
          <div class="clearfix"></div>
          {% endif %}
          {%- endfor -%}
        </div>
        <div id="no-products-found" style="display:none;">No products found on this filter.</div>

      </div>

      {%- if paginate.pages > 1 -%}
      {%- include 'pagination' -%}
      {%- endif -%}

      {%- endpaginate -%}
    </div>

    <script>
var productCount = {{ collection.all_products_count }};

      function filterProducts() {
        var products = document.querySelectorAll('.product-item');
        var selectedType = document.querySelector('.filter-type button.active').getAttribute('data-type');
        var selectedCollection = document.getElementById('collection-filter').value;
        var searchInput = document.getElementById('search-input').value.toLowerCase();

        var count = 0;

        products.forEach(function (product) {
          var title = product.querySelector('.grid-product__title').textContent.toLowerCase();
          var tags = product.dataset.tags.split(',');
          var collections = product.dataset.collections.split(',');

          var typeMatch =
            (selectedType === 'all') ||
            (selectedType === 'eSIM' && title.includes('esim')) ||
            (selectedType === 'no_eSIM' && !title.includes('esim') && !tags.includes('accessories')) ||
            (selectedType === 'accessories' && title.includes('accessories'));

          var collectionMatch = (selectedCollection === 'all' || collections.includes(selectedCollection));
          var searchMatch = title.includes(searchInput);

          if (typeMatch && collectionMatch && searchMatch) {
            product.style.display = 'block';
            count++;
          } else {
            product.style.display = 'none';
          }
        });

        var noProductsFoundMessage = document.getElementById('no-products-found');
        noProductsFoundMessage.style.display = count === 0 ? 'block' : 'none';

        productCount = count;
        updateProductCount();
        updateFilterSelection();
      }

      function filterByTitle(titleFilter, button) {
        var typeButtons = document.querySelectorAll('.filter-type button');

        // Remove the 'active' class from all buttons
        typeButtons.forEach(function (btn) {
          btn.classList.remove('active');
        });

        // Add the 'active' class to the clicked button
        button.classList.add('active');

        filterProducts();
      }

      function filterByCollection(selectedCollection) {
        filterProducts();
      }

      function filterByTag(selectedTag) {
        var products = document.querySelectorAll('.product-item');
        var typeButtons = document.querySelectorAll('.filter-type button');
        var count = 0;

        products.forEach(function (product) {
          var tags = product.dataset.tags.split(',');
          if (selectedTag === 'all' || tags.includes(selectedTag)) {
            product.style.display = 'block';
            count++;
          } else {
            product.style.display = 'none';
          }
        });

        productCount = count;
        updateProductCount();

        // Update selected type based on selected tag
        var selectedType = 'All';
        if (selectedTag !== 'all' && selectedTag !== 'accessories') {
          typeButtons.forEach(function (button) {
            if (button.textContent.toLowerCase() === selectedTag) {
              selectedType = button.textContent;
            }
          });
        } else if (selectedTag === 'accessories') {
          selectedType = 'Accessories';
        }

        // Remove the 'active' class from all buttons
        typeButtons.forEach(function (btn) {
          btn.classList.remove('active');
        });

        // Add the 'active' class to the corresponding button
        typeButtons.forEach(function (btn) {
          if (btn.textContent.toLowerCase() === selectedType.toLowerCase()) {
            btn.classList.add('active');
          }
        });

        updateFilterSelection();
      }

      function filterBySearch() {
        filterProducts();
    
        // Update the URL with the search query
        var searchInput = document.getElementById('search-input').value.toLowerCase();
        updateUrlParameter('q', searchInput);
    
        // Show/hide Reset button based on the search input value
        var resetButton = document.getElementById('resetButton');
        resetButton.style.display = searchInput !== '' ? 'inline-block' : 'none';
      }
    
    

      function updateUrlParameter(key, value) {
        var url = new URL(window.location.href);
      
        // Use if statement with proper condition
        if (value !== '') {
          url.searchParams.set(key, value);
        }
      
        history.replaceState(null, null, url.toString());
      }
      

      function resetSearch() {
        var url = new URL(window.location.href);
        var key = 'q';
      
        // If the 'q' parameter is present, remove it from the URL
        if (url.searchParams.get(key) !== null) {
          url.searchParams.delete(key);
          history.replaceState(null, null, url.toString());
        }
      }
      


      function sortProducts(sortBy) {
        var productsContainer = document.getElementById('carousel_one');
        var products = Array.from(productsContainer.getElementsByClassName('product-item'));

        switch (sortBy) {
          case 'price-low-to-high':
            // Sorting by price as before
            products.sort(function (a, b) {
              var priceA = parseFloat(a.querySelector('.sale-price').textContent.replace(/[^\d.-]/g, ''));
              var priceB = parseFloat(b.querySelector('.sale-price').textContent.replace(/[^\d.-]/g, ''));
              return priceA - priceB;
            });
            break;

          case 'price-high-to-low':
            // Sorting by price as before
            products.sort(function (a, b) {
              var priceA = parseFloat(a.querySelector('.sale-price').textContent.replace(/[^\d.-]/g, ''));
              var priceB = parseFloat(b.querySelector('.sale-price').textContent.replace(/[^\d.-]/g, ''));
              return priceB - priceA;
            });
            break;

          case 'title-a-z':
            // Sorting by title A-Z
            products.sort(function (a, b) {
              var titleA = a.querySelector('.grid-product__title').textContent.toLowerCase().replace(/[^a-zA-Z0-9]/g, '');
              var titleB = b.querySelector('.grid-product__title').textContent.toLowerCase().replace(/[^a-zA-Z0-9]/g, '');
              return titleA.localeCompare(titleB);
            });
            break;

          case 'title-z-a':
            // Sorting by title Z-A
            products.sort(function (a, b) {
              var titleA = a.querySelector('.grid-product__title').textContent.toLowerCase().replace(/[^a-zA-Z0-9]/g, '');
              var titleB = b.querySelector('.grid-product__title').textContent.toLowerCase().replace(/[^a-zA-Z0-9]/g, '');
              return titleB.localeCompare(titleA);
            });
            break;

          case 'date-new-to-old':
            // Sorting by date, new to old
            products.sort(function (a, b) {
              var dateA = new Date(a.dataset.date);
              var dateB = new Date(b.dataset.date);
              return dateB - dateA;
            });
            break;

          case 'date-old-to-new':
            // Sorting by date, old to new
            products.sort(function (a, b) {
              var dateA = new Date(a.dataset.date);
              var dateB = new Date(b.dataset.date);
              return dateA - dateB;
            });
            break;

          case 'default':
          default:
            products.sort(function (a, b) {
              var titleA = a.querySelector('.grid-product__title').textContent.toLowerCase().replace(/[^a-zA-Z0-9]/g, '');
              var titleB = b.querySelector('.grid-product__title').textContent.toLowerCase().replace(/[^a-zA-Z0-9]/g, '');
              return titleA.localeCompare(titleB);
            });
            break;
        }

        // Append the sorted products back to the container
        products.forEach(function (product) {
          productsContainer.appendChild(product);
        });

        updateFilterSelection();
      }


      function updateFilterSelection() {
        var selectedTag = document.getElementById('tag-filter').value;
        var selectedCollection = document.getElementById('collection-filter').value;
        var selectedType = document.querySelector('.filter-type button.active').textContent;
        var selectedSortElement = document.querySelector('.radio-sort input[name="sort-radio"]:checked + span');
        var selectedSort = selectedSortElement.textContent;

        var selectedCollectionElement = document.getElementById('selected-collection');
        var selectedTagElement = document.getElementById('selected-tag');
        var selectedTypeElement = document.getElementById('selected-type');
        var selectedSortElement = document.getElementById('selected-sort');
        var resetButton = document.getElementById('resetButton');

        // Update with div elements
        function removeSimCardSuffix(text) {
          return text.replace('-sim-card', '');
        }
        selectedTagElement.innerHTML = selectedTag !== 'all' ? '<div>' + removeSimCardSuffix(selectedTag) + '</div>' : '';
        selectedCollectionElement.innerHTML = selectedCollection !== 'all' ? '<div>' + removeSimCardSuffix(selectedCollection) + '</div>' : '';
        selectedTypeElement.innerHTML = '<div>' + selectedType + '</div>';
        selectedSortElement.innerHTML = selectedSort !== 'default' ? '<div>' + selectedSort + '</div>' : '';

        // Show/hide Reset button based on selections
        resetButton.style.display = (selectedTag !== 'all' || selectedCollection !== 'all' || selectedType !== 'All' || selectedSort !== 'default') ? 'inline-block' : 'none';
      }


      function resetFilters() {
        var tagFilter = document.getElementById('tag-filter');
        tagFilter.value = 'all';

        var collectionFilter = document.getElementById('collection-filter');
        collectionFilter.value = 'all';

        var searchInput = document.getElementById('search-input');
        searchInput.value = ''; // Clear the search input

        // Remove the 'q' parameter from the URL
        updateUrlParameter('q', '');


        var typeButtons = document.querySelectorAll('.filter-type button');
        typeButtons.forEach(function (button) {
          button.classList.remove('active');
        });
        typeButtons[0].classList.add('active'); // Set 'All' as active

        // Set default text to 'All Products'
        document.getElementById('selected-type').textContent = 'All';

        var sortRadios = document.querySelectorAll('input[name="sort-radio"]');
        sortRadios[0].click(); // Set 'Default' as checked

        filterByTag('all');
        updateFilterSelection();

        // Remove the 'q' parameter from the URL
        updateUrlParameter('q', '');

        // Optionally, you may want to call filterProducts here as well
        // to immediately apply the reset filters
        filterProducts();
      }


      window.onload = function () {
        resetFilters();
    
        // Check if there is a 'q' parameter in the URL
        var urlParams = new URLSearchParams(window.location.search);
        var searchQuery = urlParams.get('q');
    
        if (searchQuery) {
          // Set the search input value and apply the search filter immediately
          document.getElementById('search-input').value = searchQuery;
          filterBySearch();
        }
      };



      function updateProductCount() {
        document.getElementById('product-count').textContent = productCount;
      }

      function disableSelect() {
        document.getElementById('tag-filter').disabled = true;
        document.getElementById('collection-filter').disabled = true;

      }

      function disableAccessories() {
        document.getElementById('accessories-filter').disabled = true;
      }

      function resetDisable() {
        //Set Disable removed
        document.getElementById('tag-filter').disabled = false;
        document.getElementById('collection-filter').disabled = false;
        document.getElementById('accessories-filter').disabled = false;
      }

      document.addEventListener('DOMContentLoaded', function () {
        // Get the elements
        var filterToggle = document.getElementById('filter-toggle');
        var productFilterSection = document.querySelector('.product-filter-inner');
    
        // Add click event listener
        filterToggle.addEventListener('click', function () {
          // Toggle the class on the product filter section
          productFilterSection.classList.toggle('filter-toggled');
    
          // Change text/icon inside the #filter-toggle element
          var openIcon = filterToggle.querySelector('.filter-open-icon');
          var closeIcon = filterToggle.querySelector('.filter-close-icon');
    
          if (productFilterSection.classList.contains('filter-toggled')) {
            openIcon.style.display = 'none';
            closeIcon.style.display = 'inline-block';
          } else {
            openIcon.style.display = 'inline-block';
            closeIcon.style.display = 'none';
          }
        });
      });
    </script>
    <!-- End of All Products Collection -->


    {% if collection.description != blank %}
    <div class="collection_description">
      {{ collection.description }}
    </div>
    {% else %}
    {% assign collection_ref = collections[collection.metafields.custom_fields["parent_collection_url"]] %}
    {% if collection_ref.description != blank %}
    <div class="collection_description">
      {{ collection_ref.description }}
    </div>
    {% endif %}
    {% endif %}


    {% schema %}
    {
    "name": {
    "da": "Kollektionssider",
    "de": "Kategorieseiten",
    "en": "Collection pages",
    "es": "Páginas de colección",
    "fi": "Kokoelman sivut",
    "fr": "Pages de collection",
    "hi": "कलेक्शन पेज",
    "it": "Pagine delle collezioni",
    "ja": "コレクションページ",
    "ko": "컬렉션 페이지",
    "ms": "Halaman koleksi",
    "nb": "Samlingssider",
    "nl": "Collectiepagina's",
    "pt-BR": "Páginas de Coleções",
    "pt-PT": "Páginas de Coleções",
    "sv": "Produktseriesidor",
    "th": "หน้าคอลเลกชัน",
    "zh-CN": "产品系列页面",
    "zh-TW": "商品系列頁面"
    },
    "settings": [
    {
    "type": "checkbox",
    "id": "show_collection_image",
    "label": {
    "da": "Vis kollektionsbillede",
    "de": "Kategorie-Foto anzeigen",
    "en": "Show collection image",
    "es": "Mostrar imagen de la colección",
    "fi": "Näytä kokoelman kuva",
    "fr": "Afficher l'image de la collection",
    "hi": "कलेक्शन इमेज दिखाएं",
    "it": "Mostra immagine collezione",
    "ja": "コレクションの画像を表示する",
    "ko": "컬렉션 이미지 표시",
    "ms": "Tunjukkan imej koleksi",
    "nb": "Vis samlingsbilde",
    "nl": "Collectieafbeelding weergeven",
    "pt-BR": "Exibir imagem da coleção",
    "pt-PT": "Mostrar imagem da coleção",
    "sv": "Visa produktseriebilder",
    "th": "แสดงรูปภาพคอลเลกชัน",
    "zh-CN": "显示产品系列图片",
    "zh-TW": "顯示商品系列圖片"
    },
    "default": false
    },
    {
    "type": "checkbox",
    "id": "collection_sort_enable",
    "label": {
    "da": "Aktivér sortering af kollektioner",
    "de": "Kategoriesortierung aktivieren",
    "en": "Enable collection sorting",
    "es": "Habilitar la la función ordenar colecciones",
    "fi": "Ota kokoelman lajittelu käyttöön",
    "fr": "Activer le tri de la collection",
    "hi": "कलेक्शन क्रमबद्ध करना सक्षम करें",
    "it": "Abilita ordinamento collezione",
    "ja": "コレクションの並べ替えを有効にする",
    "ko": "컬렉션 정렬 사용",
    "ms": "Dayakan penyusunan koleksi",
    "nb": "Aktiver sortering av samlinger",
    "nl": "Sorteren op collectie inschakelen",
    "pt-BR": "Habilitar a ordenação de coleções",
    "pt-PT": "Ativar ordenação de coleção",
    "sv": "Aktivera produktseriesortering",
    "th": "เปิดใช้การเรียงลำดับคอลเลกชัน",
    "zh-CN": "启用产品系列排序",
    "zh-TW": "啟用商品系列排序功能"
    }
    },
    {
    "type": "checkbox",
    "id": "collection_tags_enable",
    "label": {
    "da": "Aktivér tagfiltrering",
    "de": "Tag-Filtern erlauben",
    "en": "Enable tag filtering",
    "es": "Habilitar filtro de etiquetas",
    "fi": "Ota tunnisteiden suodatus käyttöön",
    "fr": "Activer le filtrage par balises",
    "hi": "टैग फ़िल्टर करना सक्षम करें",
    "it": "Attiva filtro tag",
    "ja": "タグでの絞り込みを有効にする",
    "ko": "태그 필터링 사용",
    "ms": "Dayakan penapisan tag",
    "nb": "Aktiver taggfiltrering",
    "nl": "Filteren op tags inschakelen",
    "pt-BR": "Habilitar filtragem de tag",
    "pt-PT": "Ativar filtragem por etiqueta",
    "sv": "Aktivera taggfiltrering",
    "th": "เปิดใช้การกรองแท็ก",
    "zh-CN": "启用标签筛选",
    "zh-TW": "啟用標籤篩選功能"
    }
    },
    {
    "type": "header",
    "content": {
    "da": "Produkter",
    "de": "Produkte",
    "en": "Products",
    "es": "Productos",
    "fi": "Tuotteet",
    "fr": "Produits",
    "hi": "उत्पाद",
    "it": "Prodotti",
    "ja": "商品管理",
    "ko": "제품",
    "ms": "Produk",
    "nb": "Produkter",
    "nl": "Producten",
    "pt-BR": "Produtos",
    "pt-PT": "Produtos",
    "sv": "Produkter",
    "th": "สินค้า",
    "zh-CN": "产品",
    "zh-TW": "產品"
    }
    },
    {
    "type": "select",
    "id": "collection_products_grid",
    "label": {
    "da": "Gittertypografi",
    "de": "Rasterstil",
    "en": "Grid style",
    "es": "Estilo de cuadrícula",
    "fi": "Ruudukon tyyli",
    "fr": "Style de grille",
    "hi": "ग्रिड स्टाइल",
    "it": "Stile griglia",
    "ja": "グリッドスタイル",
    "ko": "그리드 스타일",
    "ms": "Gaya grid",
    "nb": "Rutenettstil",
    "nl": "Rasterstijl",
    "pt-BR": "Estilo da grade",
    "pt-PT": "Estilo da grelha",
    "sv": "Rutnätsstil",
    "th": "สไตล์กริด",
    "zh-CN": "网格样式",
    "zh-TW": "網格樣式"
    },
    "options": [
    {
    "value": "collage",
    "label": {
    "da": "Collage",
    "de": "Collage",
    "en": "Collage",
    "es": "Collage",
    "fi": "Kollaasi",
    "fr": "Collage",
    "hi": "कोलाज",
    "it": "Collage",
    "ja": "コラージュ",
    "ko": "콜라주",
    "ms": "Kolaj",
    "nb": "Fotomontasje",
    "nl": "Collage",
    "pt-BR": "Colagem",
    "pt-PT": "Colagem",
    "sv": "Kollage",
    "th": "ภาพตัดแปะ",
    "zh-CN": "拼贴画",
    "zh-TW": "拼貼"
    }
    },
    {
    "value": "grid",
    "label": {
    "da": "Gitter",
    "de": "Raster",
    "en": "Grid",
    "es": "Cuadrícula",
    "fi": "Ruudukko",
    "fr": "Grille",
    "hi": "ग्रिड",
    "it": "Griglia",
    "ja": "グリッド",
    "ko": "그리드",
    "ms": "Grid",
    "nb": "Rutenett",
    "nl": "Raster",
    "pt-BR": "Grade",
    "pt-PT": "Grelha",
    "sv": "Rutnät",
    "th": "กริด",
    "zh-CN": "网格",
    "zh-TW": "網格"
    }
    }
    ]
    },
    {
    "type": "checkbox",
    "id": "product_vendor_enable",
    "label": {
    "da": "Vis produktleverandør",
    "de": "Produktverkäufer anzeigen",
    "en": "Show product vendor",
    "es": "Mostrar proveedor del producto",
    "fi": "Näytä tuotteen myyjä",
    "fr": "Afficher le distributeur du produit",
    "hi": "उत्पाद विक्रेता दिखाएं",
    "it": "Indica fornitore prodotto",
    "ja": "商品の販売元を表示する",
    "ko": "제품 공급 업체 표시",
    "ms": "Tunjukkan vendor produk",
    "nb": "Vis produktleverandør",
    "nl": "Productleverancier weergeven",
    "pt-BR": "Exiba o fornecedor do produto",
    "pt-PT": "Mostrar o fornecedor do produto",
    "sv": "Visa produktsäljare",
    "th": "แสดงผู้ขายสินค้า",
    "zh-CN": "显示产品厂商",
    "zh-TW": "顯示產品廠商"
    }
    }
    ],
    "presets": [
    {
    "name": {
    "da": "Kollektionsliste",
    "de": "Kategorieliste",
    "en": "Collection list",
    "es": "Lista de colecciones",
    "fi": "Kokoelmaluettelo",
    "fr": "Liste des collections",
    "hi": "कलेक्शन सूची",
    "it": "Elenco delle collezioni",
    "ja": "コレクションリスト",
    "ko": "컬렉션 목록",
    "ms": "Senarai koleksi",
    "nb": "Samlingsliste",
    "nl": "Collectielijst",
    "pt-BR": "Lista de coleções",
    "pt-PT": "Lista de coleções",
    "sv": "Kollektionslista",
    "th": "รายการคอลเลกชัน",
    "zh-CN": "产品系列列表",
    "zh-TW": "商品系列清單"
    },
    "category": {
    "da": "Samling",
    "de": "Kategorie",
    "en": "Collection",
    "es": "Colección",
    "fi": "Kokoelma",
    "fr": "Collection",
    "hi": "कलेक्शन",
    "it": "Collezione",
    "ja": "コレクション",
    "ko": "컬렉션",
    "ms": "Koleksi",
    "nb": "Samling",
    "nl": "Collectie",
    "pt-BR": "Coleção",
    "pt-PT": "Coleção",
    "sv": "Produktserie",
    "th": "คอลเลกชัน",
    "zh-CN": "收藏",
    "zh-TW": "商品系列"
    },
    "blocks": [
    {
    "type": "collection"
    },
    {
    "type": "collection"
    },
    {
    "type": "collection"
    }
    ]
    }
    ],
    "blocks": [
    {
    "type": "collection",
    "name": {
    "da": "Samling",
    "de": "Kategorie",
    "en": "Collection",
    "es": "colección",
    "fi": "Kokoelma",
    "fr": "Collection",
    "hi": "कलेक्शन",
    "it": "collezione",
    "ja": "コレクション",
    "ko": "컬렉션",
    "ms": "Koleksi",
    "nb": "Samling",
    "nl": "Collectie",
    "pt-BR": "Coleção",
    "pt-PT": "Coleção",
    "sv": "Produktserie",
    "th": "คอลเลกชัน",
    "zh-CN": "收藏",
    "zh-TW": "商品系列"
    },
    "settings": [
    {
    "type": "header",
    "content": "Parent Collection"
    },
    {
    "id": "collection",
    "type": "collection",
    "label": {
    "da": "Samling",
    "de": "Kategorie",
    "en": "Collection",
    "es": "colección",
    "fi": "Kokoelma",
    "fr": "Collection",
    "hi": "कलेक्शन",
    "it": "collezione",
    "ja": "コレクション",
    "ko": "컬렉션",
    "ms": "Koleksi",
    "nb": "Samling",
    "nl": "Collectie",
    "pt-BR": "Coleção",
    "pt-PT": "Coleção",
    "sv": "Produktserie",
    "th": "คอลเลกชัน",
    "zh-CN": "收藏",
    "zh-TW": "商品系列"
    }
    }
    ]
    }
    ]
    }
    {% endschema %}